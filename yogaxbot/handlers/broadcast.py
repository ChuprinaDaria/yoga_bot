import logging
from aiogram import F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from . import router
from .common import AdminStates
from yogaxbot.db import SessionLocal, User, BroadcastLog
from datetime import datetime
from sqlalchemy import func

logger = logging.getLogger(__name__)

@router.callback_query(F.data == 'admin_broadcast')
async def admin_broadcast_cb(callback: CallbackQuery, state):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìù –¢–µ–∫—Å—Ç', callback_data='admin_broadcast_text')],
        [InlineKeyboardButton(text='üñºÔ∏è –§–æ—Ç–æ + –ø—ñ–¥–ø–∏—Å', callback_data='admin_broadcast_photo')],
        [InlineKeyboardButton(text='üéØ –ó–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', callback_data='admin_broadcast_by_status')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')]
    ])
    await callback.message.answer('–†–æ–∑—Å–∏–ª–∫–∞:', reply_markup=kb)
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == 'admin_broadcast_by_status')
async def admin_broadcast_status_menu(callback: CallbackQuery, state):
    session = SessionLocal()
    try:
        stats = {}
        result = session.query(User.status, func.count(User.user_id)).group_by(User.status).all()
        for status, count in result:
            stats[status] = count

        total = session.query(User).count()

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f'üë• –í—Å—ñ–º ({total})', callback_data='broadcast_status_all')],
            [InlineKeyboardButton(text=f'üÜï –ù–æ–≤–∏–º ({stats.get("new", 0)})', callback_data='broadcast_status_new')],
            [InlineKeyboardButton(text=f'üèÉ –ê–∫—Ç–∏–≤–Ω–∏–π —Ç—Ä—ñ–∞–ª ({stats.get("trial_active", 0)})', callback_data='broadcast_status_trial_active')],
            [InlineKeyboardButton(text=f'‚è∞ –¢—Ä—ñ–∞–ª –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è ({stats.get("trial_expired", 0)})', callback_data='broadcast_status_trial_expired')],
            [InlineKeyboardButton(text=f'‚úÖ –ì–æ—Ç–æ–≤—ñ –∫—É–ø—É–≤–∞—Ç–∏ ({stats.get("open", 0)})', callback_data='broadcast_status_open')],
            [InlineKeyboardButton(text=f'üíé –ê–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ ({stats.get("active", 0)})', callback_data='broadcast_status_active')],
            [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_broadcast')]
        ])

        await callback.message.answer('–û–±–µ—Ä—ñ—Ç—å —Ü—ñ–ª—å–æ–≤—É –∞—É–¥–∏—Ç–æ—Ä—ñ—é:', reply_markup=kb)
    finally:
        session.close()
    await callback.answer()

@router.callback_query(F.data.startswith('broadcast_status_'))
async def admin_broadcast_status_selected(callback: CallbackQuery, state):
    status = callback.data.replace('broadcast_status_', '')
    await state.update_data(target_status=status)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìù –¢–µ–∫—Å—Ç', callback_data='admin_status_broadcast_text')],
        [InlineKeyboardButton(text='üñºÔ∏è –§–æ—Ç–æ + –ø—ñ–¥–ø–∏—Å', callback_data='admin_status_broadcast_photo')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_broadcast_by_status')]
    ])

    status_names = {
        'all': '–≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º',
        'new': '–Ω–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º', 
        'trial_active': '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –∞–∫—Ç–∏–≤–Ω–∏–º —Ç—Ä—ñ–∞–ª–æ–º',
        'trial_expired': '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏–º —Ç—Ä—ñ–∞–ª–æ–º',
        'open': '–≥–æ—Ç–æ–≤–∏–º –¥–æ –ø–æ–∫—É–ø–∫–∏',
        'active': '–∞–∫—Ç–∏–≤–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º'
    }
    await callback.message.answer(
        f'–†–æ–∑—Å–∏–ª–∫–∞ {status_names.get(status, status)}.\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', 
        reply_markup=kb
    )
    await callback.answer()

@router.callback_query(F.data == 'admin_status_broadcast_text')
async def admin_status_broadcast_text_cb(callback: CallbackQuery, state):
    await callback.message.answer('–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:')
    await state.set_state(AdminStates.await_status_broadcast_text)
    await callback.answer()

@router.message(AdminStates.await_status_broadcast_text)
async def admin_status_broadcast_text_msg(message: Message, state, bot: Bot):
    data = await state.get_data()
    target_status = data.get('target_status', 'all')

    session = SessionLocal()
    try:
        if target_status == 'all':
            users = session.query(User).all()
        else:
            users = session.query(User).filter(User.status == target_status).all()

        total, success, failed = 0, 0, 0
        for u in users:
            try:
                await bot.send_message(u.user_id, message.text, protect_content=True)
                success += 1
            except Exception as e:
                failed += 1
                logger.warning("status_broadcast_text failed to user_id=%s err=%s", u.user_id, e)
            total += 1

        session.add(BroadcastLog(
            created_at=datetime.utcnow(), 
            kind=f'text_status_{target_status}', 
            payload_preview=(message.text or '')[:100], 
            total=total, 
            success=success, 
            failed=failed
        ))
        session.commit()

        status_names = {
            'all': '–≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º',
            'new': '–Ω–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º', 
            'trial_active': '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –∞–∫—Ç–∏–≤–Ω–∏–º —Ç—Ä—ñ–∞–ª–æ–º',
            'trial_expired': '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏–º —Ç—Ä—ñ–∞–ª–æ–º',
            'open': '–≥–æ—Ç–æ–≤–∏–º –¥–æ –ø–æ–∫—É–ø–∫–∏',
            'active': '–∞–∫—Ç–∏–≤–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º'
        }

        await message.answer(
            f'–†–æ–∑—Å–∏–ª–∫—É {status_names.get(target_status, target_status)} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n'
            f'–£—Å–ø—ñ—à–Ω–æ: {success}, –ø–æ–º–∏–ª–æ–∫: {failed}'
        )
    finally:
        session.close()

    await state.clear()

@router.callback_query(F.data == 'admin_status_broadcast_photo')
async def admin_status_broadcast_photo_cb(callback: CallbackQuery, state):
    await callback.message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:')
    await state.set_state(AdminStates.await_status_broadcast_photo)
    await callback.answer()

@router.message(AdminStates.await_status_broadcast_photo)
async def admin_status_broadcast_photo_msg(message: Message, state, bot: Bot):
    if not message.photo or not message.caption:
        await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º!')
        return

    data = await state.get_data()
    target_status = data.get('target_status', 'all')

    session = SessionLocal()
    try:
        if target_status == 'all':
            users = session.query(User).all()
        else:
            users = session.query(User).filter(User.status == target_status).all()

        total, success, failed = 0, 0, 0
        for u in users:
            try:
                await bot.send_photo(
                    u.user_id, 
                    message.photo[-1].file_id, 
                    caption=message.caption, 
                    protect_content=True
                )
                success += 1
            except Exception as e:
                failed += 1
                logger.warning("status_broadcast_photo failed to user_id=%s err=%s", u.user_id, e)
            total += 1

        session.add(BroadcastLog(
            created_at=datetime.utcnow(), 
            kind=f'photo_status_{target_status}', 
            payload_preview=(message.caption or '')[:100], 
            total=total, 
            success=success, 
            failed=failed
        ))
        session.commit()

        status_names = {
            'all': '–≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º',
            'new': '–Ω–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º', 
            'trial_active': '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –∞–∫—Ç–∏–≤–Ω–∏–º —Ç—Ä—ñ–∞–ª–æ–º',
            'trial_expired': '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏–º —Ç—Ä—ñ–∞–ª–æ–º',
            'open': '–≥–æ—Ç–æ–≤–∏–º –¥–æ –ø–æ–∫—É–ø–∫–∏',
            'active': '–∞–∫—Ç–∏–≤–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º'
        }

        await message.answer(
            f'–†–æ–∑—Å–∏–ª–∫—É {status_names.get(target_status, target_status)} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n'
            f'–£—Å–ø—ñ—à–Ω–æ: {success}, –ø–æ–º–∏–ª–æ–∫: {failed}'
        )
    finally:
        session.close()
    await state.clear()

@router.callback_query(F.data == 'admin_broadcast_text')
async def admin_broadcast_text_cb(callback: CallbackQuery, state):
    await callback.message.answer('–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:')
    await state.set_state(AdminStates.await_broadcast_text)
    await callback.answer()

@router.message(AdminStates.await_broadcast_text)
async def admin_broadcast_text_msg(message: Message, state, bot: Bot):
    session = SessionLocal()
    users = session.query(User).all()
    total, success, failed = 0, 0, 0
    for u in users:
        try:
            await bot.send_message(u.user_id, message.text, protect_content=True)
            success += 1
        except Exception as e:
            failed += 1
            logger.warning("broadcast_text failed to user_id=%s err=%s", u.user_id, e)
        total += 1
    session.add(BroadcastLog(created_at=datetime.utcnow(), kind='text', payload_preview=(message.text or '')[:100], total=total, success=success, failed=failed))
    session.commit()
    session.close()
    await message.answer(f'–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø—ñ—à–Ω–æ: {success}, –ø–æ–º–∏–ª–æ–∫: {failed}')
    await state.clear()

@router.callback_query(F.data == 'admin_broadcast_photo')
async def admin_broadcast_photo_cb(callback: CallbackQuery, state):
    await callback.message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:')
    await state.set_state(AdminStates.await_broadcast_photo)
    await callback.answer()

@router.message(AdminStates.await_broadcast_photo)
async def admin_broadcast_photo_msg(message: Message, state, bot: Bot):
    if not message.photo or not message.caption:
        await message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º!')
        return
    session = SessionLocal()
    users = session.query(User).all()
    total, success, failed = 0, 0, 0
    for u in users:
        try:
            await bot.send_photo(u.user_id, message.photo[-1].file_id, caption=message.caption, protect_content=True)
            success += 1
        except Exception as e:
            failed += 1
            logger.warning("broadcast_photo failed to user_id=%s err=%s", u.user_id, e)
        total += 1
    session.add(BroadcastLog(created_at=datetime.utcnow(), kind='photo', payload_preview=(message.caption or '')[:100], total=total, success=success, failed=failed))
    session.commit()
    session.close()
    await message.answer(f'–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø—ñ—à–Ω–æ: {success}, –ø–æ–º–∏–ª–æ–∫: {failed}')
    await state.clear()
