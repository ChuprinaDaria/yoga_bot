import logging
from aiogram import F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from . import router
from .common import AdminStates
from yogaxbot.db import SessionLocal, WorkoutCatalog, User
from datetime import datetime
from sqlalchemy import func

logger = logging.getLogger(__name__)

@router.callback_query(F.data == 'admin_add_workout')
async def admin_add_workout_cb(callback: CallbackQuery, state):
    await state.clear()
    await callback.message.answer('–ö—Ä–æ–∫ 1/4: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è')
    await state.set_state(AdminStates.await_workout_photo)
    await callback.answer()

@router.message(AdminStates.await_workout_photo)
async def admin_add_workout_step_photo(message: Message, state):
    if not message.photo:
        await message.answer('–ü–æ—Ç—Ä—ñ–±–Ω–µ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        return
    file_id = message.photo[-1].file_id
    await state.update_data(photo_file_id=file_id)
    await message.answer('–ö—Ä–æ–∫ 2/4: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –æ–ø–∏—Å (—Ç–µ–∫—Å—Ç) —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è')
    await state.set_state(AdminStates.await_workout_caption)

@router.message(AdminStates.await_workout_caption)
async def admin_add_workout_step_caption(message: Message, state):
    if not message.text:
        await message.answer('–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        return
    await state.update_data(caption=message.text)
    await message.answer('–ö—Ä–æ–∫ 3/4: –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥/–Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 360)')
    await state.set_state(AdminStates.await_workout_code)

@router.message(AdminStates.await_workout_code)
async def admin_add_workout_step_code(message: Message, state):
    code_raw = (message.text or '').strip()
    if not code_raw:
        await message.answer('–ö–æ–¥ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. –í–≤–µ–¥—ñ—Ç—å —â–µ —Ä–∞–∑:')
        return
    # –¥–æ–∑–≤–æ–ª–∏–º–æ —è–∫ —á–∏—Å—Ç–∏–π –Ω–æ–º–µ—Ä, —Ç–∞–∫ —ñ –±—É–¥—å-—è–∫–∏–π —Ä—è–¥–æ–∫, –∑–±–µ—Ä–µ–∂–µ–º–æ —è–∫ —î
    await state.update_data(workout_code=code_raw)
    await message.answer('–ö—Ä–æ–∫ 4/4: –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ http)')
    await state.set_state(AdminStates.await_workout_url)

@router.message(AdminStates.await_workout_url)
async def admin_add_workout_step_url(message: Message, state):
    url = (message.text or '').strip()
    if not url.startswith('http'):
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ú–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ http –∞–±–æ https. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ —Ä–∞–∑:')
        return
    data = await state.get_data()
    photo_file_id = data.get('photo_file_id')
    caption = data.get('caption', '')
    data_code = data.get('workout_code')
    code = str(data_code) if data_code else f"w{int(datetime.utcnow().timestamp())}"
    session = SessionLocal()
    try:
        existing = session.query(WorkoutCatalog).filter_by(code=code).first()
        if existing is not None:
            await message.answer('–¢–∞–∫–∏–π –∫–æ–¥ –≤–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –∫–æ–¥:')
            await state.set_state(AdminStates.await_workout_code)
            return
        w = WorkoutCatalog(code=code, caption=caption, url=url, photo_file_id=photo_file_id, is_active=True)
        session.add(w)
        session.commit()
        
        # –ó–∞–ø–∏—Ç–∞—Ç–∏, —â–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ
        await state.update_data(new_workout_id=w.id)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ü—Ä–æ—Å—Ç–æ –∑–±–µ—Ä–µ–≥—Ç–∏', callback_data='workout_action_save')],
            [InlineKeyboardButton(text='–ó–±–µ—Ä–µ–≥—Ç–∏ —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏', callback_data='workout_action_send')]
        ])
        await message.answer(f'–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ö–æ–¥: {code}. –©–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?', reply_markup=kb)
        await state.set_state(AdminStates.await_workout_action)

    finally:
        session.close()

@router.callback_query(AdminStates.await_workout_action)
async def workout_action_callback(callback: CallbackQuery, state, bot: Bot):
    action = callback.data
    data = await state.get_data()
    wid = data.get('new_workout_id')

    if not wid:
        await callback.message.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.")
        await state.clear()
        await callback.answer()
        return

    if action == 'workout_action_save':
        await callback.message.edit_text("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        await state.clear()
        await callback.answer()
        return

    # –õ–æ–≥—ñ–∫–∞ –¥–ª—è 'workout_action_send'
    session = SessionLocal()
    try:
        stats = {}
        result = session.query(User.status, func.count(User.user_id)).group_by(User.status).all()
        for status, count in result:
            stats[status] = count
        total = session.query(User).count()

        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f'üë• –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º ({total})', callback_data=f'workout_send_all_{wid}')],
            [InlineKeyboardButton(text=f'üÜï –ù–æ–≤–∏–º ({stats.get("new", 0)})', callback_data=f'workout_send_status_new_{wid}')],
            [InlineKeyboardButton(text=f'üèÉ –ê–∫—Ç–∏–≤–Ω–∏–π —Ç—Ä—ñ–∞–ª ({stats.get("trial_active", 0)})', callback_data=f'workout_send_status_trial_active_{wid}')],
            [InlineKeyboardButton(text=f'‚è∞ –¢—Ä—ñ–∞–ª –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è ({stats.get("trial_expired", 0)})', callback_data=f'workout_send_status_trial_expired_{wid}')],
            [InlineKeyboardButton(text=f'‚úÖ –ì–æ—Ç–æ–≤—ñ –∫—É–ø—É–≤–∞—Ç–∏ ({stats.get("open", 0)})', callback_data=f'workout_send_status_open_{wid}')],
            [InlineKeyboardButton(text=f'üíé –ê–∫—Ç–∏–≤–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ ({stats.get("active", 0)})', callback_data=f'workout_send_status_active_{wid}')]
        ])
        await callback.message.edit_text('–ö–æ–º—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –±–æ–Ω—É—Å–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è?', reply_markup=kb)
    finally:
        session.close()
    
    # –°—Ç–∞–Ω –Ω–µ –æ—á–∏—â—É—î–º–æ, –±–æ workout_send_callback –æ—á—ñ–∫—É—î –Ω–∞ ID
    await callback.answer()

@router.callback_query(F.data.startswith('workout_send_'))
async def workout_send_callback(callback: CallbackQuery, state, bot: Bot):
    parts = callback.data.split('_')
    # patterns: workout_send_all_{id} or workout_send_status_{status}_{id}
    if len(parts) < 4:
        await callback.answer()
        return
    target = parts[2]
    if target == 'all':
        try:
            wid = int(parts[-1])
        except Exception:
            await callback.answer('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤')
            return
        status_filter = 'all'
    elif target == 'status' and len(parts) >= 5:
        # —Å—Ç–∞—Ç—É—Å –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ trial_active)
        status_filter = '_'.join(parts[3:-1])
        try:
            wid = int(parts[-1])
        except Exception:
            await callback.answer('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤')
            return
    else:
        await callback.answer()
        return

    session = SessionLocal()
    try:
        w = session.query(WorkoutCatalog).get(wid)
        if not w:
            await callback.message.answer('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
            await callback.answer()
            return
        # –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä—ñ—é
        if status_filter == 'all':
            users = session.query(User).all()
        else:
            users = session.query(User).filter(User.status == status_filter).all()
    finally:
        session.close()

    # –¢–µ–∫—Å—Ç —ñ –∫–Ω–æ–ø–∫–∞ —è–∫ —É –≤–∏–º–æ–∑—ñ
    text = (
        '–ü—Ä–∏–≤—ñ—Ç! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –±–æ–Ω—É—Å–Ω–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!\n'
        '–î–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –∫—É—Ä—Å—É ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É'
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏', url='https://t.me/seryogaji')]])

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è: —Ñ–æ—Ç–æ (—è–∫—â–æ —î) + –ø—ñ–¥–ø–∏—Å —ñ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –≤—ñ–¥–µ–æ
    sent_ok, sent_fail = 0, 0
    for u in users:
        try:
            if w.photo_file_id:
                await bot.send_photo(
                    u.user_id,
                    w.photo_file_id,
                    caption=f"{text}\n\n{w.caption}\n{w.url}",
                    reply_markup=kb,
                    protect_content=True
                )
            else:
                await bot.send_message(
                    u.user_id,
                    f"{text}\n\n{w.caption}\n{w.url}",
                    reply_markup=kb,
                    protect_content=True
                )
            sent_ok += 1
        except Exception:
            sent_fail += 1
            continue
    await callback.message.answer(f'–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø—ñ—à–Ω–æ: {sent_ok}, –ø–æ–º–∏–ª–æ–∫: {sent_fail}')
    await state.clear() # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω —Ç—É—Ç, –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
    await callback.answer()

@router.message(AdminStates.await_set_workout_photo)
async def admin_set_workout_photo(message: Message, state):
    if not message.photo:
        await message.answer('–ü–æ—Ç—Ä—ñ–±–Ω–µ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        return
    data = await state.get_data()
    wid = data.get('target_workout_id')
    if not wid:
        await message.answer('–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏–±—Ä–∞–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.')
        await state.clear()
        return
    session = SessionLocal()
    try:
        w = session.query(WorkoutCatalog).get(wid)
        if not w:
            await message.answer('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        else:
            w.photo_file_id = message.photo[-1].file_id
            session.commit()
            await message.answer('–§–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!')
    finally:
        session.close()
    await state.clear()