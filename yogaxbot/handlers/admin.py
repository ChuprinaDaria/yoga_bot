import logging
from aiogram import F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from . import router
from .common import AdminStates, is_admin
from yogaxbot.db import SessionLocal, User, WorkoutCatalog, TextBlock

logger = logging.getLogger(__name__)

@router.message(Command('admin'))
async def cmd_admin(message: Message, state):
    logger.info("/admin by user_id=%s", message.from_user.id)
    user_id = message.from_user.id
    if not is_admin(user_id):
        # bootstrap: —è–∫—â–æ –Ω—ñ–∫–æ–≥–æ –Ω–µ–º–∞—î ‚Äî –Ω–∞–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É
        session = SessionLocal()
        try:
            has_admin = session.query(User).filter(User.status == 'admin').first() is not None
            if not has_admin:
                user = session.query(User).get(user_id)
                if not user:
                    user = User(user_id=user_id, status='admin')
                    session.add(user)
                else:
                    user.status = 'admin'
                session.commit()
                logger.info("Bootstrap admin granted to user_id=%s", user_id)
            else:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.')
                return
        finally:
            session.close()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', callback_data='admin_workouts')],
        [InlineKeyboardButton(text='üì£ –†–æ–∑—Å–∏–ª–∫–∞', callback_data='admin_broadcast')],
        [InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', callback_data='admin_texts')]
    ])
    await message.answer('–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb)
    await state.clear()

@router.callback_query(F.data == 'admin_panel')
async def admin_panel_cb(callback: CallbackQuery, state):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', callback_data='admin_workouts')],
        [InlineKeyboardButton(text='üì£ –†–æ–∑—Å–∏–ª–∫–∞', callback_data='admin_broadcast')],
        [InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', callback_data='admin_texts')]
    ])
    await callback.message.answer('–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb)
    await state.clear()
    await callback.answer()
@router.callback_query(F.data == 'admin_texts')
async def admin_texts_menu(callback: CallbackQuery, state):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üëã Welcome (—Ç–µ–∫—Å—Ç)', callback_data='edit_text_WELCOME')],
        [InlineKeyboardButton(text='üñºÔ∏è Welcome (—Ñ–æ—Ç–æ)', callback_data='admin_edit_welcome_photo')],
        [InlineKeyboardButton(text='‚è≥ –ö—ñ–Ω–µ—Ü—å –∫—É—Ä—Å—É', callback_data='edit_text_COURSE_FINISHED')],
        [InlineKeyboardButton(text='üôÇ –§—ñ–¥–±–µ–∫: –¢–∞–∫', callback_data='edit_text_FEEDBACK_POSITIVE')],
        [InlineKeyboardButton(text='üôÅ –§—ñ–¥–±–µ–∫: –ù—ñ', callback_data='edit_text_FEEDBACK_NEGATIVE')],
        [InlineKeyboardButton(text='üèÅ –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', callback_data='edit_text_FINAL_COURSE_END')],
        [InlineKeyboardButton(text='‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑ –¥–Ω—è–º–∏', callback_data='edit_text_REMINDER_WITH_DAYS')],
        [InlineKeyboardButton(text='‚ÑπÔ∏è –Ü–Ω—Ç—Ä–æ –∫—É—Ä—Å—É', callback_data='edit_text_OPEN_COURSE_INTRO')],
        [InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')]
    ])
    await callback.message.answer('–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:', reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith('edit_text_'))
async def admin_edit_any_text(callback: CallbackQuery, state):
    key = callback.data.replace('edit_text_', '')
    await state.update_data(edit_text_key=key)
    await state.set_state(AdminStates.await_text_block_content)
    await callback.message.answer(f'–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è {key} (HTML –¥–æ–∑–≤–æ–ª–µ–Ω–æ):')
    await callback.answer()

@router.message(AdminStates.await_text_block_content)
async def admin_save_any_text(message: Message, state):
    data = await state.get_data()
    key = data.get('edit_text_key')
    if not key:
        await state.clear()
        return
    session = SessionLocal()
    try:
        session.merge(TextBlock(key=key, content=message.html_text or ''))
        session.commit()
        await message.answer(f'–¢–µ–∫—Å—Ç {key} –æ–Ω–æ–≤–ª–µ–Ω–æ.')
    finally:
        session.close()
    await state.clear()
@router.callback_query(F.data == 'admin_edit_welcome_photo')
async def admin_edit_welcome_photo_cb(callback: CallbackQuery, state):
    await state.set_state(AdminStates.await_welcome_photo)
    await callback.message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∞–±–æ URL-–ª—ñ–Ω–∫ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:')
    await callback.answer()

@router.message(AdminStates.await_welcome_photo)
async def admin_edit_welcome_photo_msg(message: Message, state):
    session = SessionLocal()
    try:
        if message.photo:
            file_id = message.photo[-1].file_id
            content = file_id
        else:
            content = (message.text or '').strip()
        block = session.query(TextBlock).get('WELCOME_PHOTO')
        if block:
            block.content = content
        else:
            session.add(TextBlock(key='WELCOME_PHOTO', content=content))
        session.commit()
        await message.answer('–§–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ.')
    finally:
        session.close()
    await state.clear()

@router.callback_query(F.data == 'admin_workouts')
async def admin_workouts_cb(callback: CallbackQuery, state):
    session = SessionLocal()
    workouts = session.query(WorkoutCatalog).all()
    kb = [[
        InlineKeyboardButton(text=f'{w.code}', callback_data=f'none_{w.id}'), # Placeholder
        InlineKeyboardButton(text='üñºÔ∏è –§–æ—Ç–æ', callback_data=f'admin_set_workout_photo_{w.id}'),
        InlineKeyboardButton(text='üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'admin_delete_workout_{w.id}')
    ] for w in workouts]
    kb.append([InlineKeyboardButton(text='‚ûï –î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', callback_data='admin_add_workout')])
    kb.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')])
    await callback.message.answer('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:', reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    session.close()
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith('admin_confirm_delete_workout_'))
async def admin_confirm_delete_workout_cb(callback: CallbackQuery, state):
    parts = callback.data.split('_')
    action = parts[4]
    wid = int(parts[5])

    if action == 'yes':
        session = SessionLocal()
        try:
            w = session.query(WorkoutCatalog).get(wid)
            if w:
                code = w.code
                session.delete(w)
                session.commit()
                await callback.message.answer(f'–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {code} –≤–∏–¥–∞–ª–µ–Ω–æ.')
            else:
                await callback.message.answer('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.')
        finally:
            session.close()
    else: # 'no'
        await callback.message.answer('–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.')

    await admin_workouts_cb(callback, state)
    await callback.answer()

@router.callback_query(F.data.startswith('admin_delete_workout_'))
async def admin_delete_workout_cb(callback: CallbackQuery, state):
    wid = int(callback.data.replace('admin_delete_workout_', ''))
    session = SessionLocal()
    try:
        w = session.query(WorkoutCatalog).get(wid)
        if w:
            kb_confirm = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text='–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'admin_confirm_delete_workout_yes_{w.id}'),
                    InlineKeyboardButton(text='–ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏', callback_data=f'admin_confirm_delete_workout_no_{w.id}')
                ]
            ])
            await callback.message.answer(f'–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {w.code}?', reply_markup=kb_confirm)
    finally:
        session.close()
    await callback.answer()

@router.callback_query(F.data.startswith('admin_set_workout_photo_'))
async def admin_set_workout_photo_cb(callback: CallbackQuery, state):
    wid = int(callback.data.replace('admin_set_workout_photo_', ''))
    await state.update_data(target_workout_id=wid)
    await state.set_state(AdminStates.await_set_workout_photo)
    await callback.message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ü—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è')
    await callback.answer()
