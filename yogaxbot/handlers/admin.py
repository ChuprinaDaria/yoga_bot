import logging
from aiogram import F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from . import router
from .common import AdminStates, is_admin
from yogaxbot.db import SessionLocal, User, WorkoutCatalog

logger = logging.getLogger(__name__)

@router.message(Command('admin'))
async def cmd_admin(message: Message, state):
    logger.info("/admin by user_id=%s", message.from_user.id)
    user_id = message.from_user.id
    if not is_admin(user_id):
        # bootstrap: —è–∫—â–æ –Ω—ñ–∫–æ–≥–æ –Ω–µ–º–∞—î ‚Äî –Ω–∞–¥–∞—Ç–∏ –ø—Ä–∞–≤–∞ –ø–æ—Ç–æ—á–Ω–æ–º—É
        session = SessionLocal()
        try:
            has_admin = session.query(User).filter(User.status == 'admin').first() is not None
            if not has_admin:
                user = session.query(User).get(user_id)
                if not user:
                    user = User(user_id=user_id, status='admin')
                    session.add(user)
                else:
                    user.status = 'admin'
                session.commit()
                logger.info("Bootstrap admin granted to user_id=%s", user_id)
            else:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.')
                return
        finally:
            session.close()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', callback_data='admin_workouts')],
        [InlineKeyboardButton(text='üì£ –†–æ–∑—Å–∏–ª–∫–∞', callback_data='admin_broadcast')]
        
    ])
    await message.answer('–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb)
    await state.clear()

@router.callback_query(F.data == 'admin_panel')
async def admin_panel_cb(callback: CallbackQuery, state):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', callback_data='admin_workouts')],
        [InlineKeyboardButton(text='üì£ –†–æ–∑—Å–∏–ª–∫–∞', callback_data='admin_broadcast')]
        
    ])
    await callback.message.answer('–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=kb)
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == 'admin_workouts')
async def admin_workouts_cb(callback: CallbackQuery, state):
    session = SessionLocal()
    workouts = session.query(WorkoutCatalog).all()
    kb = [[
        InlineKeyboardButton(text=f'{"‚úÖ" if w.is_active else "‚ùå"} {w.code}', callback_data=f'admin_toggle_workout_{w.id}'),
        InlineKeyboardButton(text='üñºÔ∏è –§–æ—Ç–æ', callback_data=f'admin_set_workout_photo_{w.id}')
    ] for w in workouts]
    kb.append([InlineKeyboardButton(text='‚ûï –î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', callback_data='admin_add_workout')])
    kb.append([InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')])
    await callback.message.answer('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:', reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    session.close()
    await state.clear()
    await callback.answer()

@router.callback_query(F.data.startswith('admin_toggle_workout_'))
async def admin_toggle_workout_cb(callback: CallbackQuery, state):
    wid = int(callback.data.replace('admin_toggle_workout_', ''))
    session = SessionLocal()
    try:
        w = session.query(WorkoutCatalog).get(wid)
        if not w:
            await callback.message.answer('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        else:
            if w.is_active:
                # –Ø–∫—â–æ –∞–∫—Ç–∏–≤–Ω–µ ‚Äî –≤–∏–º–∫–Ω—É—Ç–∏ (–ø–æ–∫–∞–∑–∞—Ç–∏ ‚ùå). –ü–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –≤–∏–¥–∞–ª–∏—Ç—å
                w.is_active = False
                session.commit()
                await callback.message.answer(f'–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {w.code} –≤–∏–º–∫–Ω–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è (–Ω–∞ ‚ùå) ‚Äî –≤–∏–¥–∞–ª–∏—Ç—å –π–æ–≥–æ.')
            else:
                code = w.code
                session.delete(w)
                session.commit()
                await callback.message.answer(f'–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è {code} –≤–∏–¥–∞–ª–µ–Ω–æ.')
    finally:
        session.close()
    await admin_workouts_cb(callback, state)
    await callback.answer()

@router.callback_query(F.data.startswith('admin_set_workout_photo_'))
async def admin_set_workout_photo_cb(callback: CallbackQuery, state):
    wid = int(callback.data.replace('admin_set_workout_photo_', ''))
    await state.update_data(target_workout_id=wid)
    await state.set_state(AdminStates.await_set_workout_photo)
    await callback.message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ü—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è')
    await callback.answer()
