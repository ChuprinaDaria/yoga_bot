import logging
import os
import asyncio
from aiogram import Bot
from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from yogaxbot.db import SessionLocal, User, WorkoutCatalog, WorkoutMessage, T, TextBlock
from . import router
from .common import get_main_reply_keyboard, menu_text

logger = logging.getLogger(__name__)

async def send_welcome(user_id, chat_id, bot: Bot):
    # 0) –õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª —É –∫–æ—Ä–µ–Ω—ñ –ø—Ä–æ—î–∫—Ç—É (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: photo_YYYY-MM-DD_..jpg –∞–±–æ —à–ª—è—Ö –∑ .env)
    default_name = os.getenv('WELCOME_PHOTO_PATH', 'photo_2025-09-21_09-36-24.jpg')
    project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
    local_path = os.path.join(project_root, default_name)

    # –°—Ç–∞—Ç–∏—á–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç—É –∫—É—Ä—Å—É
    btn_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü–û–ß–ê–¢–ò –ë–ï–ó–ö–û–®–¢–û–í–ù–ò–ô –ö–£–†–°', callback_data='start_first_workout')]
    ])

    if os.path.exists(local_path):
        try:
            await bot.send_photo(chat_id=chat_id, photo=FSInputFile(local_path), caption=await T('WELCOME'), reply_markup=btn_kb, protect_content=True)
            return
        except Exception as e:
            logger.warning("Failed to send local welcome photo at %s: %s", local_path, e)

    # 1) .env URL
    photo_url = os.getenv('WELCOME_PHOTO_URL')
    if photo_url:
        try:
            await bot.send_photo(chat_id=chat_id, photo=photo_url, caption=await T('WELCOME'), reply_markup=btn_kb, protect_content=True)
            return
        except Exception as e:
            logger.warning("Failed to send welcome photo by URL %s: %s", photo_url, e)

    # 2) –¢–µ–∫—Å—Ç–æ–≤–∏–π –±–ª–æ–∫ –∑ URL
    session = SessionLocal()
    try:
        block = session.query(TextBlock).filter_by(key='WELCOME_PHOTO').first()
        url = block.content if block else None
    finally:
        session.close()
    if url:
        try:
            await bot.send_photo(chat_id=chat_id, photo=url, caption=await T('WELCOME'), reply_markup=btn_kb, protect_content=True)
            return
        except Exception as e:
            logger.warning("Failed to send welcome photo by TextBlock URL %s: %s", url, e)

    # –§–æ–ª–±–µ–∫: —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
    await bot.send_message(chat_id=chat_id, text=await T('WELCOME'), reply_markup=btn_kb, protect_content=True)

async def send_six_workouts(user_id, chat_id, bot: Bot):
    session = SessionLocal()
    workouts = session.query(WorkoutCatalog).all() # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä is_active=True
    if not workouts:
        session.close()
        return
    sent_count = 0
    for w in workouts[:6]:
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', url=w.url)
        ]]) if w.url else None
        msg = None
        if w.photo_file_id:
            try:
                msg = await bot.send_photo(chat_id, w.photo_file_id, caption=w.caption, reply_markup=kb, protect_content=True)
            except Exception as e:
                logger.warning("Failed to send workout photo code=%s: %s; fallback to text", getattr(w, 'code', '?'), e)
        if msg is None:
            msg = await bot.send_message(chat_id, w.caption, reply_markup=kb, protect_content=True)
        session.add(WorkoutMessage(user_id=user_id, chat_id=chat_id, message_id=msg.message_id))
        sent_count += 1
    session.commit()
    session.close()
    
    # –ü—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—Å—ñ—Ö —É—Ä–æ–∫—ñ–≤ ‚Äî —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é (–ª–∏—à–µ —è–∫—â–æ —â–æ—Å—å –Ω–∞–¥—ñ—Å–ª–∞–ª–∏)
    if sent_count > 0:
        await asyncio.sleep(20)
        await bot.send_message(chat_id, await T('POST_LESSONS'), protect_content=True)

async def start_course_flow(user_id: int, chat_id: int, bot: Bot, forced: bool = False):
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –∫—É—Ä—Å—É.
    –ó–∞–≤–∂–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—î —ñ–Ω—Ç—Ä–æ, —á–µ–∫–∞—î 10 —Å–µ–∫, —Ä–µ—î—Å—Ç—Ä—É—î —Ç—Ä—ñ–∞–ª —ñ –Ω–∞–¥—Å–∏–ª–∞—î –≤–ø—Ä–∞–≤–∏.
    –Ø–∫—â–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (forced=False), —Å–ø—Ä–∞—Ü—é—î –ª–∏—à–µ –∫–æ–ª–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ start_pending_at —ñ –Ω–∞—Å—Ç–∞–≤ —á–∞—Å.
    """
    logger.info(f"Executing start_course_flow for user_id={user_id} forced={forced}")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –¥–ª—è –∞–≤—Ç–æ-–≤–∏–∫–ª–∏–∫—ñ–≤
    if not forced:
        session_check = SessionLocal()
        try:
            u = session_check.query(User).get(user_id)
            now_local = datetime.now()
            if not u or not getattr(u, 'start_pending_at', None) or now_local < u.start_pending_at:
                logger.info("Auto-start skipped for user_id=%s: pending missing or not yet time", user_id)
                return
            # —Å–∫–∏–Ω–µ–º–æ pending –æ–¥—Ä–∞–∑—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω—å
            u.start_pending_at = None
            session_check.commit()
        finally:
            session_check.close()

    # 1. –ó–∞–≤–∂–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω—Ç—Ä–æ
    await bot.send_message(chat_id, await T('OPEN_COURSE_INTRO'), protect_content=True)
    
    # 2. –ß–µ–∫–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(10)
    
    # 3. –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ç—Ä—ñ–∞–ª (—è–∫—â–æ —Ç—Ä–µ–±–∞) —ñ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≤–ø—Ä–∞–≤–∏
    session = SessionLocal()
    try:
        user = session.query(User).get(user_id)
        if not user:
            user = User(user_id=user_id, status='new')
            session.add(user)
            session.commit()

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç—Ä—ñ–∞–ª, —è–∫—â–æ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π
        if user.status != 'trial_active':
            now = datetime.utcnow()
            user.status = 'trial_active'
            user.trial_started_at = now
            user.trial_expires_at = now + timedelta(days=15)
            user.last_reminder_at = now
            session.commit()

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–∂–¥–∏ –ø—ñ—Å–ª—è —ñ–Ω—Ç—Ä–æ
        await send_six_workouts(user_id, chat_id, bot)
    finally:
        session.close()


@router.message(Command('start'))
async def cmd_start(message: Message, bot: Bot, **data):
    scheduler: AsyncIOScheduler = data.get('scheduler')
    user_id = message.from_user.id
    # ensure user exists
    session = SessionLocal()
    user = session.query(User).get(user_id)
    if not user:
        user = User(user_id=user_id, status='new')
        session.add(user)
        session.commit()
    session.close()
    await send_welcome(user_id, message.chat.id, bot)
    try:
        await bot.send_message(message.chat.id, '\u2063', reply_markup=get_main_reply_keyboard())
    except TelegramBadRequest:
        await bot.send_message(message.chat.id, '.', reply_markup=get_main_reply_keyboard())
   
    # –Ø–∫—â–æ —Ç—Ä—ñ–∞–ª –∑–∞–≤–µ—Ä—à–∏–≤—Å—è ‚Äî –Ω–µ –ø–ª–∞–Ω—É—î–º–æ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —ñ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    session_chk = SessionLocal()
    try:
        u = session_chk.query(User).get(user_id)
        expired = bool(u and u.trial_expires_at and datetime.utcnow() >= u.trial_expires_at)
        blocked_status = bool(u and getattr(u, 'status', '') in {'trial_expired', 'open', 'active'})
    finally:
        session_chk.close()

    if expired or blocked_status:
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä—É', url='https://t.me/seryogaji')]])
        await bot.send_message(message.chat.id, await T('AFTER_EXPIRE'), reply_markup=kb, protect_content=True)
        return

    if scheduler:
        run_at = datetime.now() + timedelta(minutes=1)
        logger.info("Scheduling run_start_open_course at %s for user_id=%s", run_at.isoformat(), user_id)
        # –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫—É
        session2 = SessionLocal()
        try:
            u = session2.query(User).get(user_id)
            if u:
                u.start_pending_at = run_at
                session2.commit()
        finally:
            session2.close()
        scheduler.add_job(start_course_flow, 'date', run_date=run_at, args=[user_id, message.chat.id, bot])

@router.message(F.text == 'üßò‚Äç‚ôÄÔ∏è –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –∫—É—Ä—Å')
async def handle_free_course(message: Message, bot: Bot):
    user_id = message.from_user.id
    session = SessionLocal()
    try:
        u = session.query(User).get(user_id)
        expired = bool(u and u.trial_expires_at and datetime.utcnow() >= u.trial_expires_at)
        blocked_status = bool(u and getattr(u, 'status', '') in {'trial_expired', 'open', 'active'})
    finally:
        session.close()

    if expired or blocked_status:
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä—É', url='https://t.me/seryogaji')]])
        await message.answer(await T('AFTER_EXPIRE'), reply_markup=kb)
        return

    await start_course_flow(user_id, message.chat.id, bot, forced=True)



@router.message(F.text == 'üí¨ –ß–∞—Ç —à–∫–æ–ª–∏ –π–æ–≥–∏')
async def handle_chat_link(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —á–∞—Ç—É', url='https://t.me/+xA1DOM00cc4zYmRi')]])
    await message.answer('–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ —á–∞—Ç—É:', reply_markup=kb)



@router.message(Command('contact'))
@router.message(F.text.in_({'–ù–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä—É', '‚úâÔ∏è–ù–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä—É'}))
async def handle_write_coach(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä—É', url='https://t.me/seryogaji')]])
    await message.answer('–ù–∞–ø–∏—à—ñ—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É:', reply_markup=kb)

# –í–∏–¥–∞–ª–µ–Ω–æ —Ö–µ–Ω–¥–ª–µ—Ä "–ö—É–ø–∏—Ç–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç" ‚Äî –∑–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä—É
@router.callback_query(F.data == 'start_first_workout')
async def cb_start_first_workout(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback –æ–¥—Ä–∞–∑—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ "query is too old"
    try:
        await callback.answer()
    except Exception:
        pass
    session = SessionLocal()
    try:
        u = session.query(User).get(user_id)
        expired = bool(u and u.trial_expires_at and datetime.utcnow() >= u.trial_expires_at)
        blocked_status = bool(u and getattr(u, 'status', '') in {'trial_expired', 'open', 'active'})
    finally:
        session.close()

    if expired or blocked_status:
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä—É', url='https://t.me/seryogaji')]])
        await callback.message.answer(await T('AFTER_EXPIRE'), reply_markup=kb)
        await callback.answer()
        return

    await start_course_flow(user_id, chat_id, bot, forced=True)

